{"version":3,"sources":["components/Search.js","components/Nav.js","components/Photo.js","components/PhotoContainer.js","components/NotFound.js","components/pageNotFound.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Search","handleSubmit","e","preventDefault","props","onSearch","query","value","currentTarget","reset","history","push","className","onSubmit","this","type","name","placeholder","ref","input","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","to","Photo","src","farmId","serverId","photoId","secretId","alt","title","PhotoContainer","photos","results","data","length","map","photo","key","id","farm","server","secret","NotFound","pageNotFound","App","performSearch","axios","get","then","response","setState","cats","loading","dogs","computer","search","catch","error","console","log","state","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+QAMMA,E,4MAIJC,aAAe,SAAAC,GAEbA,EAAEC,iBACF,EAAKC,MAAMC,SAAS,EAAKC,MAAMC,OAC/BL,EAAEM,cAAcC,QAEhB,EAAKL,MAAMM,QAAQC,KAAK,Y,uDAMd,IAAD,OACL,OAEI,0BAAMC,UAAU,cAAcC,SAAUC,KAAKb,cAC7C,2BAAOc,KAAK,SAASC,KAAK,SAASC,YAAY,SAAUC,IAAO,SAACC,GAAD,OAAW,EAAKb,MAAQa,KACxF,4BAAQJ,KAAK,SAASH,UAAU,iBAC9B,yBAAKQ,KAAK,OAAOC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAChE,0BAAMC,EAAE,+OACR,0BAAMA,EAAE,gBAAgBL,KAAK,gB,GAxBxBM,aAmCNC,cAAW3B,GCrBX4B,EAdJ,WACP,OAEI,yBAAKhB,UAAU,YACX,4BACI,4BAAI,kBAAC,IAAD,CAASiB,GAAG,SAAZ,QACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,SAAZ,QACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,gBCHLC,EAND,SAAC1B,GAAD,OACV,4BACI,yBAAK2B,IAAG,sBAAiB3B,EAAM4B,OAAvB,6BAAkD5B,EAAM6B,SAAxD,YAAoE7B,EAAM8B,QAA1E,YAAqF9B,EAAM+B,SAA3F,QAA2GC,IAAG,UAAMhC,EAAMiC,WC2B3HC,EA5BQ,SAAAlC,GACrB,IACImC,EADEC,EAAUpC,EAAMqC,KAUhB,OAPHD,EAAQE,OAAQ,IACjBH,EAASC,EAAQG,KAAI,SAAAC,GAAK,OACxB,kBAAC,EAAD,CAAOC,IAAOD,EAAME,GAAId,OAAUY,EAAMG,KAAMd,SAAYW,EAAMI,OAAQb,SAAYS,EAAMK,OAAQZ,MAAOO,EAAMP,MAAOH,QAAUU,EAAME,SAOlI,yBAAKlC,UAAU,mBACb,uCACE,4BAEG2B,KCFFW,EAhBE,WACb,OAEI,yBAAKtC,UAAU,mBACf,uCACA,4BACE,wBAAIA,UAAU,aACZ,gDACA,2FCQGuC,EAhBM,WACjB,OAEI,yBAAKvC,UAAU,mBACf,qCACA,4BACE,wBAAIA,UAAU,aACZ,mCACA,gEC4HGwC,E,kDAjHb,aAAe,IAAD,8BACZ,gBAmBFC,cAAgB,SAAC/C,GACfgD,IAAMC,IAAN,oFC1CW,mCD0CX,iBAAsGjD,EAAtG,8CACCkD,MAAK,SAAAC,GACU,SAAVnD,EAEF,EAAKoD,SAAS,CACZC,KAAMF,EAAShB,KAAKF,OAAOK,MAC3BgB,SAAQ,IAGQ,SAAVtD,EACR,EAAKoD,SAAS,CACZG,KAAMJ,EAAShB,KAAKF,OAAOK,MAC3BgB,SAAQ,IAGO,aAAVtD,EACP,EAAKoD,SAAS,CACZI,SAAUL,EAAShB,KAAKF,OAAOK,MAC/BgB,SAAQ,IAIV,EAAKF,SAAS,CACZK,OAAQN,EAAShB,KAAKF,OAAOK,MAC7BgB,SAAQ,OAObI,OAAM,SAAAC,GAELC,QAAQC,IAAI,2BAA4BF,OApD1C,EAAKG,MAAO,CACVT,KAAK,GACLE,KAAK,GACLC,SAAS,GACTC,OAAO,GACPH,SAAS,GAPC,E,gEAYZ9C,KAAKuC,cAAc,QACnBvC,KAAKuC,cAAc,QACnBvC,KAAKuC,cAAc,c,+BA+CZ,IAAD,OAGN,OACE,kBAAC,IAAD,KACE,yBAAKzC,UAAW,aAEd,kBAAC,EAAD,CAAQP,SAAUS,KAAKuC,gBACvB,kBAAC,EAAD,MAIGvC,KAAKsD,MAAMR,QACV,yCACD,kBAAC,IAAD,KACD,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,OAAS,kBAAK,kBAAC,IAAD,CAAU1C,GAAG,aACjD,kBAAC,IAAD,CAAOyC,KAAK,QAAQC,OAAS,kBAAM,kBAAC,EAAD,CAAgB9B,KAAQ,EAAK2B,MAAMT,UACtE,kBAAC,IAAD,CAAOW,KAAK,QAAQC,OAAS,kBAAM,kBAAC,EAAD,CAAgB9B,KAAQ,EAAK2B,MAAMP,UACtE,kBAAC,IAAD,CAAOS,KAAK,aAAaC,OAAS,kBAAM,kBAAC,EAAD,CAAgB9B,KAAQ,EAAK2B,MAAMN,cAC3E,kBAAC,IAAD,CAAOQ,KAAK,UAGVC,OAAQ,WAEJ,OAAgC,IAA7B,EAAKH,MAAML,OAAOrB,OACd,kBAAC,EAAD,MAKA,kBAAC,EAAD,CAAgBD,KAAQ,EAAK2B,MAAML,YAQhD,kBAAC,IAAD,CAAOS,UAAWrB,W,GArGZzB,aETE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.46f2530b.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n//Renders the Search compontent\r\n\r\n\r\nclass Search extends Component {\r\n  \r\n  // handleSubmit calls the performSearch function in App.js to fetch the data from the entered data in the searchfield, redirects to the search route so show the results\r\n  \r\n  handleSubmit = e => {\r\n    \r\n    e.preventDefault();    \r\n    this.props.onSearch(this.query.value);\r\n    e.currentTarget.reset(); \r\n    \r\n    this.props.history.push('/search')       \r\n    \r\n    \r\n    \r\n    \r\n  }\r\n    render() {\r\n        return(\r\n\r\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n            <input type=\"search\" name=\"search\" placeholder=\"Search\"  ref = {(input) => this.query = input}/>\r\n            <button type=\"submit\" className=\"search-button\">\r\n              <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n              </svg>\r\n            </button>\r\n          </form>            \r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Search);\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\n/** creates a NavBar to route through the topics */\r\n\r\nconst Nav =()=> {\r\n    return(\r\n        \r\n        <nav className=\"main-nav\">\r\n            <ul>\r\n                <li><NavLink to='/cats'>Cat</NavLink></li>\r\n                <li><NavLink to='/dogs'>Dog</NavLink></li>\r\n                <li><NavLink to='/computers'>Computer</NavLink></li>\r\n            </ul>\r\n        </nav>\r\n\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\n/**create a link to flickr, to show and load the pictures */\r\n\r\nconst Photo = (props) => (\r\n    <li>\r\n        <img src={`https://farm${props.farmId}.staticflickr.com/${props.serverId}/${props.photoId}_${props.secretId}.jpg`} alt= {`${props.title}`}/>\r\n  </li>    \r\n);\r\n\r\nexport default Photo;\r\n\r\n","import React from 'react';\r\nimport Photo from './Photo';\r\n\r\n/** Maps over the data which was given by props, and create the Photo comp. for each iteration.  */\r\n\r\nconst PhotoContainer = props =>  {\r\n  const results = props.data;\r\n  let photos;\r\n\r\n  if(results.length >0) {\r\n    photos = results.map(photo => \r\n      <Photo key = {photo.id} farmId = {photo.farm} serverId = {photo.server} secretId = {photo.secret} title={photo.title} photoId= {photo.id} />)\r\n  }\r\n\r\n\r\n    \r\n        return(\r\n\r\n          <div className=\"photo-container\">\r\n            <h2>Results</h2>\r\n              <ul>\r\n\r\n                {photos}\r\n                \r\n              </ul>\r\n          </div>                  \r\n\r\n\r\n        );\r\n    \r\n}\r\n\r\n\r\nexport default PhotoContainer;","import React from 'react';\r\n\r\n/** NotFound Comp. when the search didn't match */\r\n\r\nconst NotFound = () => {\r\n    return(\r\n\r\n        <div className=\"photo-container\">\r\n        <h2>Results</h2>\r\n        <ul>\r\n          <li className=\"not-found\">\r\n            <h3>No Results Found</h3>\r\n            <p>You search did not return any results. Please try again.</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\n\r\n/** appears when the url matches a non-existing route */\r\n\r\nconst pageNotFound = () => {\r\n    return(\r\n\r\n        <div className=\"photo-container\">\r\n        <h2>ERROR</h2>\r\n        <ul>\r\n          <li className=\"not-found\">\r\n            <h3>404</h3>\r\n            <p>We are sorry. Page not found.</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default pageNotFound;","import React,{Component} from 'react';\nimport './index.css';\nimport apiKey from './config';\nimport {BrowserRouter, Route, Switch,Redirect} from 'react-router-dom';\nimport axios from 'axios';\n\n\n\n\n\n// import Components\n\nimport Search from './components/Search';\nimport Nav from './components/Nav';\nimport PhotoContainer from './components/PhotoContainer';\nimport NotFound from './components/NotFound';\nimport pageNotFound from './components/pageNotFound';\n\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state ={\n      cats:[],\n      dogs:[],\n      computer:[],\n      search:[],\n      loading: true\n    };\n  } \n\n  componentDidMount(){\n    this.performSearch('cats');\n    this.performSearch('dogs');\n    this.performSearch('computer');\n\n  }\n\n/*** funciton which takes a query string as an input and perform a data fetch from a server, and pushes the results to its array */\n\n  performSearch = (query) =>{\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n    .then(response => {\n      if (query === 'cats') {\n\n        this.setState({\n          cats: response.data.photos.photo,\n          loading:false\n        });\n        \n      } else if(query === 'dogs') {\n        this.setState({\n          dogs: response.data.photos.photo,\n          loading:false\n        });\n        \n      }else if(query === 'computer') {\n        this.setState({\n          computer: response.data.photos.photo,\n          loading:false\n        });\n\n      }else{\n        this.setState({\n          search: response.data.photos.photo,\n          loading:false\n        });\n\n      }\n      \n     })    \n    \n    .catch(error => {\n          // handle error\n      console.log('Error with data fetching' ,error);\n \n    }); \n \n  }\n\n\n  render(){\n     \n\n    return (\n      <BrowserRouter>\n        <div className= 'container' >\n    \n          <Search onSearch={this.performSearch} />\n          <Nav />\n\n          {/*Conditonal rendering, when the loading state is false, a \"loading\" screen appears */}\n          {\n            (this.state.loading)\n            ? <p>Loading...</p>\n            :<Switch>\n            <Route exact path=\"/\" render ={() =><Redirect to='/cats'/> } />\n            <Route path=\"/cats\" render= {() => <PhotoContainer data = {this.state.cats}/>  }  />\n            <Route path=\"/dogs\" render= {() => <PhotoContainer data = {this.state.dogs}/>  }  />\n            <Route path=\"/computers\" render= {() => <PhotoContainer data = {this.state.computer} />  }  />   \n            <Route path=\"/search\" \n            \n            /*when nothing was found in the performSearch function a notFound message will appear, else the result will be shown */\n              render={() => \n\n                { if(this.state.search.length === 0 ){\n                  return <NotFound />\n\n\n                }\n                else{\n                  return <PhotoContainer data = {this.state.search} /> }  \n\n                }\n              }\n            />  \n                    \n\n\n            <Route component={pageNotFound} />\n          </Switch>\n          }\n          \n            \n        </div>\n      </BrowserRouter>\n    );\n\n  }\n  \n  \n}\n\nexport default App;\n","//holds the unique apiKey for Flickr (Authentication)\r\n\r\nconst apiKey = '07d6a7df596d81bea0d0aaf5cfe46df2';\r\n\r\n\r\nexport default apiKey;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}